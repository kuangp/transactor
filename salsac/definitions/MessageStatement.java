/*
	Code generation for the following grammar segment:
	
	MessageStatement :=
		[NamedTokenStatement] (MessageSend | JoinBlock)
*/

package salsac.definitions;

import salsac.*;
import salsac.SalsaCompiler;

public class MessageStatement extends SimpleNode {

	public MessageStatement(int id) 					{ super(id); }
	public MessageStatement(SalsaParser p, int id)	{ super(p, id); }

	public String getPreCode() {
		String code = SalsaCompiler.getIndent() + "// ";
		//insert a comment describing which message is being generated by the following
		//block of code
		int childPosition = 0;
		if (children.length == 2) {
			childPosition = 1;
			if (getChild(0).tokens.length == 3) {
				code += getChild(0).getToken(0) + " " + getChild(0).getToken(1) + " = ";
			} else {
				code += getChild(0).getToken(0) + " = ";
			}
		}

		if (getChild(childPosition) instanceof MessageSend) {
			SimpleNode arguments = null;

			if (getChild(childPosition).children.length > 1) {
				code += getChild(childPosition).getChild(0).getJavaCode() + 
					getChild(childPosition).getToken(0).image + 
					getChild(childPosition).getToken(1).image + "(";
				arguments = getChild(childPosition).getChild(1);
			} else {
				code += getChild(childPosition).getToken(0).image + "(";
				arguments = getChild(childPosition).getChild(0);
			}

			if (arguments.children != null) {
				for (int i = 0; i < arguments.children.length; i++) {
					code += arguments.getChild(i).getJavaCode();
					if (i != arguments.children.length-1) code += ", ";
				}
			}
			code += ")";
		} else code += "join block";

		code += "\n";

		if (children.length == 2) {
			if (getChild(0).getToken(0).image.equals("token")) {
				SalsaCompiler.symbolTable.setContinuationOutput( getChild(0).getToken(1).image );
			} else {
				code += SalsaCompiler.getIndent();

				String tokenName = getChild(0).getToken(0).image;
				if ( !((ContinuationStatement)jjtGetParent()).namedTokensUsed.contains( tokenName ) ) {
					code += "Token ";
					((ContinuationStatement)jjtGetParent()).namedTokensUsed.add(tokenName); 
				}
				code += tokenName + "_next = new Token(\"" + getChild(1).getToken(0).image + "_next\");\n";

				SalsaCompiler.symbolTable.setContinuationOutput( getChild(0).getToken(0).image + "_next" );
			}
		} 
		return code;
	}
	
	public String getPostCode() {
		String code = "";

		//update the code, and set the input for the next part of the continuation
		//with the named token
		if (children.length == 2) {
			if (getChild(0).getToken(0).image.equals("token")) {
				SalsaCompiler.symbolTable.setContinuationInput( getChild(0).getToken(1).image );
			} else {
				code += SalsaCompiler.getIndent() + getChild(0).getToken(0).image + " = " +
								    getChild(0).getToken(0).image + "_next;\n";

				SalsaCompiler.symbolTable.setContinuationInput( getChild(0).getToken(0).image + "_next" );
                        }
		}
		return code;
	}
	
	public String getChildCode() {
		if (children.length == 2) {
			return getChild(1).getJavaCode();
		} else {
			return getChild(0).getJavaCode();
		}
	}
}
