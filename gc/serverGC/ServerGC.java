package gc.serverGC;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Vector;
import gc.SnapshotList;
import gc.ActorSnapshot;
import java.util.Enumeration;
import java.util.NoSuchElementException;

public class ServerGC extends UniversalActor  implements ActorService {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		ServerGC instance = (ServerGC)new ServerGC(uan, ual,null).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new ServerGC(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return ServerGC.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new ServerGC(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return ServerGC.getReferenceByLocation(new UAL(ual)); }
	public ServerGC(boolean o, UAN __uan)	{ super(false,__uan); }
	public ServerGC(boolean o, UAL __ual)	{ super(false,__ual); }

	public ServerGC(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null,null); }
	public ServerGC(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual,null); }
	public ServerGC(UniversalActor.State sourceActor)		{ this(null, null,null);  }
	public ServerGC()		{  }
	public ServerGC(UAN __uan, UAL __ual,Object sourceActor) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			createRemotely(__uan, __ual, "gc.serverGC.ServerGC");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct () {
		Object[] __arguments = {  };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State implements salsa.resources.ActorServiceState {
		public ServerGC self;
		public void updateSelf(ActorReference actorReference) {
			((ServerGC)actorReference).setUAL(getUAL());
			((ServerGC)actorReference).setUAN(getUAN());
			self = new ServerGC(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.muteGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "gc.serverGC.ServerGC$State" );
			addMethodsForClasses();
		}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {message.activateArgsGC(this);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		Vector client;
		int GCSeconds = 60;
		Vector victimList;
		String myID = "";
		WeakReference myManager = null;
		public void construct(){
		}
		public void act(String args[]) {
			if (getUAN()!=null) {{
				myID = this.getUAN().toString();
			}
}			else {{
				myID = this.getUAL().toString();
			}
}			UAL remoteUAL;
			client = new Vector();
			victimList = new Vector();
			try {
				GCSeconds = Integer.parseInt(args[0]);
			}
			catch (Exception e) {
				System.err.println(e);
				System.err.println("Garbage Collection Server Failed!");
				System.err.println("Usage:java -cp <required lib> gc.serverGC.ServerGC GC_Period_in_Secs <Manager> <host1> <host2> ...");
				System.err.println("      where <host> has the format machineAddress:port, such as jenna.cs.rpi.edu:4444");
				this.GCdie();
				System.exit(0);
			}

			try {
				myManager = new WeakReference(self.getReferenceByName(args[1]));
			}
			catch (Exception e) {
			}

			for (int i = 2; i<args.length; i++){
				try {
					if (args[i].length()>0&&args[i].charAt(args[i].length()-1)=='/') {{
						remoteUAL = new UAL("rmsp://"+args[i]+"salsa/GCAgent");
					}
}					else {{
						remoteUAL = new UAL("rmsp://"+args[i]+"/salsa/GCAgent");
					}
}				}
				catch (Exception e) {
					System.err.println(e);
continue;				}

				WeakReference remoteSystem = new WeakReference((UniversalActor)UniversalActor.getReferenceByLocation(remoteUAL));
				client.addElement(remoteSystem);
			}
			if (myManager==null) {{
				{
					// ((ServerGC)self)<-sleeping(new Boolean(true))
					{
						Object _arguments[] = { new Boolean(true) };
						Message message = new Message( self, ((ServerGC)self), "sleeping", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			else {{
				{
					Token token_3_0 = new Token();
					// myManager<-joinGC(new WeakReference(((ServerGC)self)))
					{
						Object _arguments[] = { new WeakReference(((ServerGC)self)) };
						Message message = new Message( self, myManager, "joinGC", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// ((ServerGC)self)<-sleeping(new Boolean(true))
					{
						Object _arguments[] = { new Boolean(true) };
						Message message = new Message( self, ((ServerGC)self), "sleeping", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
;			}
}		}
		long executionTime = 0;
		public void sleeping(Boolean firstPass) {
			System.out.println("sleeping");
			boolean firstPassBool = firstPass.booleanValue();
			if (GCSeconds>=0||firstPassBool) {{
				if (mylock==0) {{
					for (int i = 0; i<tempClient.size(); i++){
						client.addElement(tempClient.get(i));
					}
				}
}				long tempTime = System.currentTimeMillis();
				System.out.println(tempTime-executionTime);
				executionTime = tempTime;
				tempClient.clear();
				try {
					Thread.sleep(GCSeconds*1000);
				}
				catch (Exception e) {
				}

				if (client.size()>0) {{
					{
						Token token_4_0 = new Token();
						// requestSnapShot(myID)
						{
							Object _arguments[] = { myID };
							Message message = new Message( self, self, "requestSnapShot", _arguments, null, token_4_0 );
							__messages.add( message );
						}
						// requestVirtualMigration(token)
						{
							Object _arguments[] = { token_4_0 };
							Message message = new Message( self, self, "requestVirtualMigration", _arguments, token_4_0, null );
							__messages.add( message );
						}
					}
;				}
}				else {{
					{
						// sleeping(new Boolean(false))
						{
							Object _arguments[] = { new Boolean(false) };
							Message message = new Message( self, self, "sleeping", _arguments, null, null );
							__messages.add( message );
						}
					}
				}
}			}
}		}
		int mylock = 0;
		public void requestSnapShot(String myid) {
			mylock++;
			System.out.println("requestSnapshot,mylock="+mylock);
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<client.size(); i++){
					WeakReference remoteSystem = (WeakReference)client.get(i);
					{
						// remoteSystem<-requestSnapShot(myID)
						{
							Object _arguments[] = { myID };
							Message message = new Message( self, remoteSystem, "requestSnapShot", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// returnRef(myID)
				{
					Object _arguments[] = { myID };
					Message message = new Message( self, self, "returnRef", _arguments, token_2_0, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public String returnRef(String ref) {
			return ref;
		}
		public SnapshotList[] requestVirtualMigration(String name) {
			System.out.println("reqVirMig");
			if (true) {{
				{
					Token token_3_0 = new Token();
					// join block
					token_3_0.setJoinDirector();
					for (int i = 0; i<client.size(); i++){
						WeakReference clientRef = (WeakReference)client.get(i);
						{
							// clientRef<-requestVirtualMigration(myID)
							{
								Object _arguments[] = { myID };
								Message message = new Message( self, clientRef, "requestVirtualMigration", _arguments, null, token_3_0 );
								__messages.add( message );
							}
						}
					}
					addJoinToken(token_3_0);
					// mergeDataReturnSnapshot(token)
					{
						Object _arguments[] = { token_3_0 };
						Message message = new Message( self, self, "mergeDataReturnSnapshot", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
			}
}			return null;
		}
		Vector tempClient = new Vector();
		public void joinGC(WeakReference myClient) {
			System.out.println("join clinet:"+myClient);
			tempClient.addElement(myClient);
		}
		public void leaveGC(ActorReference myClient) {
		}
		public void terminate() {
			if (myManager!=null) {{
				{
					// myManager<-leaveGC()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, myManager, "leaveGC", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			GCSeconds = -1;
		}
		public SnapshotList[] mergeDataReturnSnapshot(Object[] snapshots) {
			mylock--;
			System.out.println("mergDaReSnapshot,mylock="+mylock);
			SnapshotList[] snapshotList;
			if (snapshots.length<=0) {{
				return null;
			}
}			Vector snapshotVector = new Vector();
			for (int i = 0; i<snapshots.length; i++){
				if (snapshots[i]==null) {{
continue;				}
}				if (snapshots[i] instanceof SnapshotList) {{
					snapshotVector.addElement(snapshots[i]);
				}
}				else {{
					try {
						Object[] obj = (Object[])snapshots[i];
						for (int j = 0; j<obj.length; j++){
							if (obj[j]==null) {{
continue;							}
}							snapshotVector.addElement(obj[j]);
						}
					}
					catch (Exception e) {
						System.out.println("??????:"+snapshots[i]);
					}

				}
}			}
			if (snapshotVector.size()==0) {{
				return null;
			}
}			snapshotList = new SnapshotList[snapshotVector.size()];
			for (int i = 0; i<snapshotList.length; i++){
				snapshotList[i] = (SnapshotList)snapshotVector.get(i);
			}
			LinkedList roots = this.identifyUnblockedRoot(snapshotList);
			this.snapshotMark(ActorSnapshot.UNBLOCKED, snapshotList, roots);
			roots = this.identifyGlobalRoot(snapshotList);
			this.snapshotMark(ActorSnapshot.NONLOCAL, snapshotList, roots);
			this.sendKilling(snapshotList);
			return snapshotList;
		}
		private ActorSnapshot getActor(String name, SnapshotList[] snapshotList) {
			for (int i = 0; i<snapshotList.length; i++){
				ActorSnapshot ret = snapshotList[i].get(name);
				if (ret!=null) {{
					return ret;
				}
}			}
			return null;
		}
		private LinkedList identifyGlobalRoot(SnapshotList[] snapshotList) {
			LinkedList BFSMemVector = new LinkedList();
			for (int j = 0; j<snapshotList.length; j++){
				SnapshotList snapshotTable = snapshotList[j];
				for (Enumeration e = snapshotTable.elements(); e.hasMoreElements(); ){
					ActorSnapshot actor = (ActorSnapshot)e.nextElement();
					if (actor.iList==null) {{
continue;					}
}					for (int i = 0; i<actor.iList.length; i++){
						if (actor.isNotMarked()&&getActor((String)actor.iList[i], snapshotList)==null) {{
							actor.markColor(ActorSnapshot.NONLOCAL);
							BFSMemVector.addLast(actor);
break;						}
}					}
				}
			}
			return BFSMemVector;
		}
		private LinkedList identifyUnblockedRoot(SnapshotList[] snapshotList) {
			LinkedList BFSMemVector = new LinkedList();
			for (int i = 0; i<snapshotList.length; i++){
				SnapshotList snapshotTable = snapshotList[i];
				for (Enumeration e = snapshotTable.elements(); e.hasMoreElements(); ){
					ActorSnapshot actor = (ActorSnapshot)e.nextElement();
					if (actor.isUnblocked()) {{
						BFSMemVector.addLast(actor);
					}
}					else {if (actor.isNonlocal()) {{
						actor.markColor(ActorSnapshot.NOTMARKED);
					}
}}				}
			}
			return BFSMemVector;
		}
		public int snapshotMark(int color, SnapshotList[] snapshotList, LinkedList BFSMemVector) {
			ActorSnapshot currentSnapshot;
			int ret = 0;
			for (; ; ){
				try {
					currentSnapshot = (ActorSnapshot)BFSMemVector.removeFirst();
				}
				catch (NoSuchElementException e) {
break;				}

				Object[] flist = currentSnapshot.fList;
				if (flist==null||flist.length==0) {{
continue;				}
}				for (int i = 0; i<flist.length; i++){
					Object nextActorObj = getActor((String)flist[i], snapshotList);
					if (nextActorObj!=null) {{
						ActorSnapshot nextActor = (ActorSnapshot)nextActorObj;
						if (!nextActor.isNotMarked()) {{
continue;						}
}						else {{
							nextActor.markColor(color);
							BFSMemVector.addLast(nextActor);
							ret++;
						}
}					}
}				}
			}
			BFSMemVector.clear();
			return ret;
		}
		private void sendKilling(SnapshotList[] snapshotList) {
			System.out.println("killing");
			int throughPut = 0;
			Vector killing = new Vector();
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int j = 0; j<snapshotList.length; j++){
					SnapshotList snapshotTable = snapshotList[j];
					for (Enumeration e = snapshotTable.elements(); e.hasMoreElements(); ){
						ActorSnapshot actor = (ActorSnapshot)e.nextElement();
						if (actor.isNotMarked()) {{
							killing.addElement(actor.name);
							throughPut++;
							snapshotTable.remove(actor.name);
						}
}						else {if (actor.isUnblocked()) {{
							snapshotTable.remove(actor.name);
						}
}}					}
					WeakReference client = new WeakReference(null, new UAL(snapshotTable.getID()+"salsa/GCAgent"));
					if (killing.size()>0) {{
						{
							// client<-requestKilling(myID, killing)
							{
								Object _arguments[] = { myID, killing };
								Message message = new Message( self, client, "requestKilling", _arguments, null, token_2_0 );
								__messages.add( message );
							}
						}
						killing.clear();
					}
}				}
				System.out.println("total throughput="+throughPut);
				addJoinToken(token_2_0);
				// sleeping(new Boolean(false))
				{
					Object _arguments[] = { new Boolean(false) };
					Message message = new Message( self, self, "sleeping", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
	}
}