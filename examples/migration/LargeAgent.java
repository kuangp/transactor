package examples.migration;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.


public class LargeAgent extends Agent implements ActorService {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		LargeAgent instance = (LargeAgent)new LargeAgent(uan, ual,null).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new LargeAgent(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return LargeAgent.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new LargeAgent(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return LargeAgent.getReferenceByLocation(new UAL(ual)); }
	public LargeAgent(boolean o, UAN __uan)	{ super(false,__uan); }
	public LargeAgent(boolean o, UAL __ual)	{ super(false,__ual); }

	public LargeAgent(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null,null); }
	public LargeAgent(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual,null); }
	public LargeAgent(UniversalActor.State sourceActor)		{ this(null, null,null);  }
	public LargeAgent()		{  }
	public LargeAgent(UAN __uan, UAL __ual,Object sourceActor) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			createRemotely(__uan, __ual, "examples.migration.LargeAgent");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends Agent.State implements salsa.resources.ActorServiceState {
		public LargeAgent self;
		public void updateSelf(ActorReference actorReference) {
			((LargeAgent)actorReference).setUAL(getUAL());
			((LargeAgent)actorReference).setUAN(getUAN());
			self = new LargeAgent(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.muteGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "examples.migration.LargeAgent$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		byte[] largeData;
		public void setSize(int size) {
			largeData = new byte[size];
			{
				// standardOutput<-println("An array with size "+size+" is created...")
				{
					Object _arguments[] = { "An array with size "+size+" is created..." };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void act(String[] args) {
			try {
				LargeAgent agent = ((LargeAgent)new LargeAgent(new UAN(args[1]), null,this).construct());
				Token synchToken1 = new Token("synchToken1");
				{
					// token synchToken1 = setSize(new Integer(args[0]))
					{
						Object _arguments[] = { new Integer(args[0]) };
						Message message = new Message( self, self, "setSize", _arguments, null, synchToken1 );
						__messages.add( message );
					}
				}
				Token synchToken2 = new Token("synchToken2");
				{
					// token synchToken2 = agent<-printItinerary()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, agent, "printItinerary", _arguments, null, synchToken2 );
						Object[] _propertyInfo = { synchToken1 };
						message.setProperty( "waitfor", _propertyInfo );
						__messages.add( message );
					}
				}
				for (int i = 2; i<args.length; i++){
					{
						Token token_4_0 = new Token();
						Token token_4_1 = new Token();
						Token token_4_2 = new Token();
						// agent<-migrate(args[i])
						{
							Object _arguments[] = { args[i] };
							Message message = new Message( self, agent, "migrate", _arguments, null, token_4_0 );
							Object[] _propertyInfo = { synchToken2 };
							message.setProperty( "waitfor", _propertyInfo );
							__messages.add( message );
						}
						// agent<-addLocation(args[i])
						{
							Object _arguments[] = { args[i] };
							Message message = new Message( self, agent, "addLocation", _arguments, token_4_0, token_4_1 );
							__messages.add( message );
						}
						// agent<-printItinerary()
						{
							Object _arguments[] = {  };
							Message message = new Message( self, agent, "printItinerary", _arguments, token_4_1, token_4_2 );
							__messages.add( message );
						}
						// synchToken2 = agent<-printTime()
						Token synchToken2_next = new Token("<-_next");
						{
							Object _arguments[] = {  };
							Message message = new Message( self, agent, "printTime", _arguments, token_4_2, synchToken2_next );
							__messages.add( message );
						}
						synchToken2 = synchToken2_next;
					}
				}
			}
			catch (Exception e) {
				{
					// standardOutput<-println(e)
					{
						Object _arguments[] = { e };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				{
					// standardOutput<-println("Usage: java migration.LargeAgent <size> <UAN> (<UAL>)*")
					{
						Object _arguments[] = { "Usage: java migration.LargeAgent <size> <UAN> (<UAL>)*" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

		}
	}
}