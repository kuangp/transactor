module examples.Heat;

import java.io.*;
import java.util.*;

behavior DistributedHeat{

//     int actors = 4;
//     String nameServer = "jupiter.wcl.cs.rpi.edu";
//     String theatersFile = "wcl.txt";



    int iterations=100;
    int x=120;
    int y=120;
    int actors = 2;
    long initialTime;
    String nameServer = "n1.ns.cs.rpi.edu";
    String theatersFile = "cluster.txt";
    String fileName = "heat-salsa.map";
                
    double[][] createInitialData(){
        double [][]data = new double[x][];
        for (int i = 0; i<x; i++){
            data[i] = new double[y];
            for(int j=0; j<y; j++){
                data[i][j]=20.0;
                if(i==0||j==0||i==x-1||j==y-1)
                    data[i][j]=20.0;
                if(j==0&&i>x/4&&i<3*x/4)
                    data[i][j]=100.0;
            }
        }
        return data;
    }

    void produceFile(double[][] data, String fileName){
        try {
        PrintWriter out = new PrintWriter(new FileWriter(fileName));
    
        out.println(x+" "+y);
        for(int i=0;i<x;i++)
            {
                for(int j=0;j<y;j++)
		    try{
                      out.println(data[i][j]);
		    } catch (Exception e) {continue;}
            }
        out.flush();
        out.close();
        } catch (IOException ioe){
            standardOutput<-println("[error] Can't open the file "+fileName+" for writing.");
        }
    }
                    
    double[][] doWork(double[][] data, int iterations, int noActors, String nameServer, String theatersFile){
	  
	// divide number of rows into actors
	int rowsPerActor = x/noActors;

	//create actors and assign data
	HeatWorker[] workers = new HeatWorker[noActors];

	for (int a=0; a<noActors; a++){
	    // each actor represents a submatrix with rows i, to i+rPA 
	    int i = a*rowsPerActor;
	    double[][] workerData = new double[rowsPerActor][];
	    for (int j=0; j<rowsPerActor; j++){
		workerData[j] = new double[y];
		System.arraycopy(data[i],0,workerData[j],0,y);
		i++;
	    }
	    workers[a] = new HeatWorker(workerData) at (new UAN("uan://"+nameServer+":3030/a"+a),null);
	}

	// connect worker neighbours
	standardOutput<-println(self+" connecting worker neighbors");
	for (int a=0; a<noActors; a++){
	    if (a>0) workers[a]<-connectTop(workers[a-1]);
	    if (a<noActors-1) workers[a]<-connectBottom(workers[a+1]);
	}

	// read available theaters
	Vector theaters = new Vector();
	String theater;

	try {
	    BufferedReader in = new BufferedReader(new FileReader(theatersFile));
	    while ((theater = in.readLine())!= null){
		theaters.add(theater);
	    }
	    in.close(); 
	} catch (IOException ioe){
	    standardOutput<-println("[error] Can't open the file "+fileName+" for writing.");
	}

	// migrate actors to theaters
	for (int a=0; a<noActors; a++){
	    standardOutput<-println("Sending actor "+
				    "uan://"+nameServer+":3030/a"+a+" to "+
				    "rmsp://"+theaters.get(a%theaters.size())+"/a"+a);
	    workers[a]<-migrate("rmsp://"+theaters.get(a%theaters.size())+"/a"+a);
	}

	//start computation
	standardOutput<-println(">>>>>>Starting the computation");
        initialTime = System.currentTimeMillis();
	

	join{ 		
		for (int a=0;a<noActors;a++)	
			workers[a]<-doWork(new Integer(iterations));		
	}@composeMatrix(token)@currentContinuation;


/*join(workers<-doWork(new Integer(iterations)))@
            composeMatrix@currentContinuation;*/


}

    void endTimer(){
	long finalTime = System.currentTimeMillis();
	long runningTime = finalTime - initialTime;
	double processingRate = 1.0*iterations*(x-2)*(y-2)/runningTime;
	standardOutput<-println("Time for "+iterations+" iterations on "
				+(x-2)+","+(y-2)+" grid: "+runningTime+" ms.");
	standardOutput<-println("Execution rate: "+processingRate+" points/ms");
    }

    double [][] composeMatrix (Object[] results){
	//receives an array of sub-matrices for each actor's work
		
	double[][] cresults;
	
	double [][] m = new double[x][];
	int i = 0;
	for (int a = 0; a<results.length; a++){
	    cresults = (double[][]) results[a];
	    for (int j = 0; j<cresults.length; j++){
		m[i] = new double[y];
		System.arraycopy(cresults[j], 0, m[i], 0, y);
		i++;
	    }
	}
	endTimer();
	standardOutput<-println("Returned matrix size:"+m.length+","+m[0].length);
	return m;
    }

  // Goal is to receive the x, y, number of iterations (INFINITE is ok)
  // and initial number of actors.
  // Divide the work among the actors and produce the heat matrix
  void act(String args[]){

      int argc = args.length;

      if(argc>=1) iterations=Integer.parseInt(args[0]);;
      if(argc>=2) x=Integer.parseInt(args[1]);
      if(argc>=3) y=Integer.parseInt(args[2]);
      if(argc>=4) actors=Integer.parseInt(args[3]);
      if(argc>=5) nameServer=args[4];
      if(argc>=6) theatersFile = args[5];
      if(argc>=7) fileName=args[6];

      x+=2; y+=2;

      createInitialData() @ 
      doWork(token, new Integer(iterations), new Integer(actors), nameServer, theatersFile) 
      @produceFile(token, fileName)
      @standardOutput<-println("Computation is done");

  }

}
