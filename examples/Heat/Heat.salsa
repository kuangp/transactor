module examples.Heat;


import java.io.*;

behavior Heat {

    int iterations=1024;
    int x=126;
    int y=126;
    int actors = 4;
    String nameServer = "jupiter.wcl.cs.rpi.edu";
    String theatersFile = "wcl.txt";
    String fileName = "heat-salsa.map";

    double[][] createInitialData(){
	double [][]data = new double[x][];
	for (int i = 0; i<x; i++){
	    data[i] = new double[y];
	    for(int j=0; j<y; j++){
		data[i][j]=20.0;
		if(i==0||j==0||i==x-1||j==y-1)
		    data[i][j]=20.0;
		if(j==0&&i>x/4&&i<3*x/4)
		    data[i][j]=100.0;
	    }
	}
	return data;
    }

    double[][] doWork(double[][] data, int iterations, int noActors, String nameServer, String theatersFile){

	double[][] next = new double[x][];
	for (int i = 0; i<x; i++){
	    next[i] = new double[y];
	    System.arraycopy(data[i],0,next[i],0,y);
	}

	long initialTime = System.currentTimeMillis();

	for(int k=0;k<iterations;k++)
	    {
		for(int i=1; i<x-1; i++)
		    for(int j=1; j<y-1; j++)
			next[i][j]=0.25*(data[i-1][j]+data[i][j-1]
					   +data[i+1][j]+data[i][j+1]);
		
                double [][]temp=next; next=data; data=temp;
	    }

	long finalTime = System.currentTimeMillis();
	long runningTime = finalTime - initialTime;
	double processingRate = 1.0*iterations*(x-2)*(y-2)/runningTime;
	standardOutput<-println("Time for "+iterations+" iterations on "
				+(x-2)+","+(y-2)+" grid: "+runningTime+" ms.");
	standardOutput<-println("Execution rate: "+processingRate+" points/ms");

	return data;
    }

    void produceFile(double[][] data, String fileName){
	try {
	PrintWriter out = new PrintWriter(new FileWriter(fileName));

	out.println(x+" "+y);
	for(int i=0;i<x;i++)
	    {
		for(int j=0;j<y;j++)
		    out.println(data[i][j]);
	    }
	out.flush();
	out.close(); 
	} catch (IOException ioe){
	    standardOutput<-println("[error] Can't open the file "+fileName+" for writing.");
	}
    }

  // Goal is to receive the x, y, number of iterations (INFINITE is ok)
  // and initial number of actors.
  // Divide the work among the actors and produce the heat matrix
  void act(String args[]){

      int argc = args.length;

      if(argc>=1) iterations=Integer.parseInt(args[0]);
      if(argc>=2) x=Integer.parseInt(args[1]);
      if(argc>=3) y=Integer.parseInt(args[2]);
      if(argc>=4) actors=Integer.parseInt(args[3]);
      if(argc>=5) nameServer=args[4];
      if(argc>=6) theatersFile = args[5];
      if(argc>=7) fileName=args[6];

      x+=2; y+=2;

      createInitialData() @
	  doWork(token, new Integer(iterations), new Integer(actors), 
                     nameServer, theatersFile) @
	  produceFile(token, fileName);

  }

}
