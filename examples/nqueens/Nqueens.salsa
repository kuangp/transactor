module examples.nqueens;

behavior Nqueens {
    
  int COUNT=0;

  public Nqueens() {
    COUNT=0;
  }

  public void dummy() {}

  public int getCount() {return COUNT;}

  public void add(Object[] res) {
    for (int i=0;i<res.length;i++) {COUNT+=((Integer)res[i]).intValue();}
  }

  void compute(Integer y, Integer left,Integer down,Integer right, Integer SIZE, Integer MASK) {
    this.Backtrack(y.intValue(),left.intValue(),down.intValue(),right.intValue(), SIZE.intValue(), MASK.intValue());
  }

  void Backtrack(int y, int left, int down, int right, int SIZE, int MASK)
  {
      int  bitmap, bit;

      if (y == SIZE) {
          COUNT++;
      } else {
          bitmap = MASK & ~(left | down | right);
          while (bitmap>0) {
              bit = -bitmap & bitmap;
              bitmap ^= bit;
              this.Backtrack(y+1, (left | bit)<<1, down | bit, (right | bit)>>1, SIZE, MASK);
          }
      }
  }

  void act(String args[]) {
    try{
	Nqueens[] actors=new Nqueens[Integer.parseInt(args[1])];
	for (int i=0;i<actors.length;i++) {actors[i]=new Nqueens();}
		int computingLevel=2;
		if (args.length>2) { computingLevel=Integer.parseInt(args[2]);}
        int SIZE = Integer.parseInt(args[0]);   /*  <- N  */
        int MASK = (1 << SIZE) - 1;
	if (SIZE<6) {self<-compute(0,0,0,0,new Integer(SIZE),new Integer(MASK))@self<-getCount()@standardOutput<-println(token);}
	else {
    		int down=0,left=0,right=0;
		int jdown=0,jleft=0,jright=0;
    		int bitmap = (MASK & ~(left | down | right));
		join{
    		  while (bitmap>0) {
		      int bit = -bitmap & bitmap;
		      bitmap ^= bit;
		      jdown=down | bit;
		      jleft=(left | bit)<<1;
		      jright=(right | bit)>>1;
		      int jbitmap = MASK & ~(jleft | jdown | jright);

		      int indexOfActors=0;
		      while (jbitmap>0) {
		          bit = -jbitmap & jbitmap;
		          jbitmap ^= bit;
		          actors[indexOfActors % actors.length]<-Backtrack(new Integer(2), new Integer((jleft | bit)<<1), new Integer(jdown | bit), new Integer((jright | bit)>>1), new Integer(SIZE), new Integer(MASK));
			  indexOfActors++;
		      } 
		  }
		} @ 
		join {
			for (int i=0;i<actors.length;i++) {
			  actors[i]<-getCount();
			}
		} @self<-add(token) @self<-getCount()@standardOutput<-println(token);;
          }
        } catch (Exception e) {System.err.println("USAGE:java examples.nqueens.Nqueens <N> <# of actors>");}

	}
}
