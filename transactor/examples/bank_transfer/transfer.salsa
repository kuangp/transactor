module transactor.examples.bank_transfer;

import transactor.language.*;
import java.util.*;

behavior transfer extends Transactor {

    // This example is tested with an actor for simplicity
    void act(String[] args) {
        bankaccount savings = new bankaccount(100) at (new UAN("uan://localhost/savings"));
        bankaccount checking = new bankaccount(100) at (new UAN("uan://localhost/checking"));
        teller atm = new teller() at (new UAN("uan://localhost/teller"));
        pinger acct_pinger = new pinger() at (new UAN("uan://localhost/pinger"));
        
        acct_pinger<-init(atm) @
            savings<-initialize() @
            checking<-initialize() @
            atm<-initialize() @
        standardOutput<-println("SAVINGS ACCOUNT: ") @
            savings<-printData() @
            standardOutput<-println() @
        standardOutput<-println("CHECKING ACCOUNT: ") @
            checking<-printData() @
            standardOutput<-println() @
        standardOutput<-println("TELLER: ") @
            atm<-printData() @
            standardOutput<-println() @
        standardOutput<-println("PINGER: ") @
            acct_pinger<-printData() @
        atm<-transfer(500, savings, checking, acct_pinger) @
        // wait for transactions to complete
        standardOutput<-println("===================================="):delay(new Integer(5000)) @
        standardOutput<-println("SAVINGS ACCOUNT: ") @
            savings<-printData() @
            standardOutput<-println() @
        standardOutput<-println("CHECKING ACCOUNT: ") @
            checking<-printData() @
            standardOutput<-println() @
        standardOutput<-println("TELLER: ") @
            atm<-printData() @
            standardOutput<-println() @
        standardOutput<-println("PINGER: ") @
            acct_pinger<-printData();
    }
}
