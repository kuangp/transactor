module transactor.examples.bank_transfer;

import transactor.language.*;
import java.util.*;

behavior teller extends Transactor {

    private bankaccount inacct;
    private bankaccount outacct;
    private int acks = 0;

    public teller(bankaccount in, bankaccount out, int num_acks){
        super(self);
        this.setTState("acks", num_acks);
        this.setTState("inacct", in);
        this.setTState("outacct", out);
        this.stabilize();
        this.checkpoint(); return;
    }

    public void transfer(int delta){
        // Transactor operations should not be messages, but instead
        // method calls under implementation to be executed sequentially 
        Object[] in_params = {delta, this.self()};
        Object[] out_params = {-1*delta, this.self()};
        this.sendMsg("adj", in_params, ((Transactor)this.getTState("inacct")));
        this.sendMsg("adj", out_params, ((Transactor)this.getTState("outacct")));
    }

    public void done(String msg){
        standardOutput<-println(msg);
        this.setTState("acks", ((int)this.getTState("acks")) + 1); // Setting ack
        if (((int)this.getTState("acks")) == 2){
            this.stabilize();
            Object[] p1 = {((Transactor)this.getTState("inacct"))};
            Object[] p2 = {((Transactor)this.getTState("outacct"))};
            this.sendMsg("pingreq", p1, ((Transactor)this.getTState("outacct")));
            this.sendMsg("pingreq", p2, ((Transactor)this.getTState("inacct")));
            Object[] p3 = {this.self()};
            this.sendMsg("pingreq", p3, ((Transactor)this.getTState("inacct")));
            this.sendMsg("pingreq", p3, ((Transactor)this.getTState("outacct")));
        }
    }

    public void ping() {
        this.checkpoint(); return;
    }

    public void printData(){
        System.out.println("Acks: " + ((int)this.getTState("acks")));
        System.out.println(this.getString());
    }   
}
