module transactor.examples.bank_transfer;

import transactor.language.*;
import java.util.*;

behavior teller extends Transactor {

    private bankaccount inacct;
    private bankaccount outacct;
    private int acks = 0;

    public teller(bankaccount in, bankaccount out, int num_acks){
        super(self);
        this.getTState(); // Getting acks, inacct, outacct
        acks = num_acks;
        inacct = in;
        outacct = out;
        this.stabilize();
        this.checkpoint(); return;
    }

    public void transfer(int delta){
        Transactor t = this.self();
        // Transactor operations should not be messages, but instead
        // method calls under implementation to be executed sequentially 
        Object[] in_params = {delta, t};
        Object[] out_params = {-1*delta, t};
        this.sendMsg("adj", in_params, inacct);
        this.sendMsg("adj", out_params, outacct);
    }

    public void done(String msg){
        standardOutput<-println(msg);
        this.getTState(); // Getting ack
        acks = acks + 1;
        this.setTState(); // Setting ack
        this.getTState(); // Getting ack
        if (acks == 2){
            this.stabilize();
            Object[] p1 = {inacct};
            Object[] p2 = {outacct};
            this.sendMsg("pingreq", p1, outacct);
            this.sendMsg("pingreq", p2, inacct);
            Transactor t = this.self();
            Object[] p3 = {t};
            this.sendMsg("pingreq", p3, inacct);
            this.sendMsg("pingreq", p3, outacct);
        }
    }

    public void ping() {
        this.checkpoint(); return;
    }

    public void printData(){
        this.getTState(); // Getting ack
        System.out.println("Acks: " + acks);
        System.out.println(this.getString());
    }   
}
