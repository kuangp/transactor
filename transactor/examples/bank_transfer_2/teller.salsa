module transactor.examples.bank_transfer_2;

import transactor.language.*;
import java.util.*;

behavior teller extends Transactor {

    private int acks = 0;
    private Object acked;

    public teller() {
        super(self);
    }

    public void initialize(){
        this.stabilize();
        this.checkpoint(); return;
    }

    public void transfer(int delta, bankaccount inacct, bankaccount outacct) {
        // Transactor operations should not be messages, but instead
        // method calls under implementation to be executed sequentially 
        Object[] in_params = {delta, this.self()};
        Object[] out_params = {-1*delta, this.self()};
        this.sendMsg("adj", in_params, inacct);
        this.sendMsg("adj", out_params, outacct);
    }

    public void done(String msg) {
        standardOutput<-println(msg);
        this.setTState("acks", ((int)this.getTState("acks")) + 1); // Setting ack
        if (((int)this.getTState("acks")) == 2){
            this.stabilize();
            this.sendMsg("endCDSUpdate", new Object[0], ((PingDirector)this.getTState("pingDirector")));
        }
    }

    public void printData() {
        System.out.println("Acks: " + acks);
        System.out.println(this.getString());
    }   
}
