package transactor.language;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;
import java.lang.reflect.Field;
import gc.*;
import java.net.URI;

/* 
 * [Proxy Abstraction]
 * Proxies are innately stable and does not create any dependencies on them and thus cannot perform set states or rollback.
 * They are able to be constructed with an initial state and perform get states but must be created from a stable indepdendent parent.
 */
public class Proxy extends Transactor  {

	public static ActorReference getReferenceByName(UAN uan)	{ return new Proxy(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Proxy.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Proxy(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Proxy.getReferenceByLocation(new UAL(ual)); }
	public Proxy(boolean o, UAN __uan)	{ super(false,__uan); }
	public Proxy(boolean o, UAL __ual)	{ super(false,__ual); }
	public Proxy()		{  }

	public class State extends Transactor.State {
		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "transactor.language.Proxy$State" );
			addMethodsForClasses();
		}


		public void construct(Transactor self){
            super.construct(self);
		}

		public void recvMsg(Message msg, Worldview msg_wv) {
            this.stabilize();
            super.recvMsg(msg, msg_wv);
		}

		public void sendMsg(String method, Object[] params, Transactor recipient) {
            this.stabilize();
            super.sendMsg(method, params, recipient);
		}
	
        // Proxies cannot coordinate transactions and do not have an influence on the global state so they do not partake in the transaction protocol
        public void transactionStart(String msg, Object[] msg_args, PingDirector director){}
        public void pingreq(Transactor[] pingreqs) {}
        public void ping() {}
	}
}
