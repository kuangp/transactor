package transactor.language;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;

public class Transactor extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		Transactor instance = (Transactor)new Transactor(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Transactor(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Transactor.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Transactor(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Transactor.getReferenceByLocation(new UAL(ual)); }
	public Transactor(boolean o, UAN __uan)	{ super(false,__uan); }
	public Transactor(boolean o, UAL __ual)	{ super(false,__ual); }
	public Transactor(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public Transactor(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public Transactor(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public Transactor()		{  }
	public Transactor(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "transactor.language.Transactor", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (Transactor self) {
		Object[] __arguments = { self };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct () {
		Object[] __arguments = {  };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public Transactor self;
		public void updateSelf(ActorReference actorReference) {
			((Transactor)actorReference).setUAL(getUAL());
			((Transactor)actorReference).setUAN(getUAN());
			self = new Transactor(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "transactor.language.Transactor$State" );
			addMethodsForClasses();
		}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		Worldview wv;
		String name;
		public void construct(Transactor self){
			this.self = ((Transactor)self);
			if (self.getUAN()!=null) {this.name = self.getUAN().toString();
}			else {this.name = self.getUAL().toString();
}			wv = new Worldview();
			HashMap new_histMap = new HashMap();
			new_histMap.put(name, new History());
			wv.setHistMap(new_histMap);
		}
		public void construct(){
			if (self.getUAN()!=null) {this.name = self.getUAN().toString();
}			else {this.name = self.getUAL().toString();
}			wv = new Worldview();
			HashMap new_histMap = new HashMap();
			new_histMap.put(name, new History());
			wv.setHistMap(new_histMap);
		}
		public void setWV(Worldview wv) {
			this.wv = wv;
		}
		public void recvMsg(Message msg, Worldview msg_wv) {
			Worldview union = wv.union(msg_wv);
			HashSet current = new HashSet();
			current.add(name);
			if (union.invalidates(wv.getHistMap(), current)) {{
				if (wv.getHistMap().get(name).isPersistent()) {{
					{
						// rollback(true)
						{
							Object _arguments[] = { true };
							Message message = new Message( self, self, "rollback", _arguments, null, null );
							__messages.add( message );
						}
					}
					Worldview new_wv = new Worldview();
					HashMap new_histMap = new HashMap();
					new_histMap.put(name, union.getHistMap().get(name));
					new_wv.setHistMap(new_histMap);
					{
						// setWV(new_wv)
						{
							Object _arguments[] = { new_wv };
							Message message = new Message( self, self, "setWV", _arguments, null, null );
							__messages.add( message );
						}
					}
					{
						// recvMsg(msg, msg_wv)
						{
							Object _arguments[] = { msg, msg_wv };
							Message message = new Message( self, self, "recvMsg", _arguments, null, null );
							__messages.add( message );
						}
					}
				}
}				else {{
					this.destroy();
					System.out.println("annihilated");
				}
}			}
}			else {if (union.invalidates(msg_wv.getHistMap(), msg_wv.getRootSet())) {{
				wv = union;
				wv.setRootSet(new HashSet());
			}
}			else {{
				wv = union;
				self.send(msg);
			}
}}		}
		public void sendMsg(String method, Object[] params, Transactor recipient) {
			{
				// recipient<-recvMsg(new Message(((Transactor)self), recipient, method, params, null, null), this.wv)
				{
					Object _arguments[] = { new Message(((Transactor)self), recipient, method, params, null, null), this.wv };
					Message message = new Message( self, recipient, "recvMsg", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public Transactor newTActor(Transactor new_T) {
			String new_name;
			if (new_T.getUAN()!=null) {new_name = new_T.getUAN().toString();
}			else {new_name = new_T.getUAL().toString();
}			wv.getHistMap().put(new_name, new History());
			wv.getDepGraph().put(new_name, new HashSet());
			wv.getDepGraph().get(new_name).add(name);
			Iterator i = wv.getRootSet().iterator();
			while (i.hasNext()) {
				wv.getDepGraph().get(new_name).add((String)i.next());
			}
			wv.getRootSet().add(new_name);
			Worldview new_wv = new Worldview(wv.getHistMap(), wv.getDepGraph(), new HashSet());
			{
				// new_T<-setWV(new_wv)
				{
					Object _arguments[] = { new_wv };
					Message message = new Message( self, new_T, "setWV", _arguments, null, null );
					__messages.add( message );
				}
			}
			return new_T;
		}
		public void stabilize() {
			wv.getHistMap().get(name).stabilize();
		}
		public boolean dependent() {
			return !wv.independent(name);
		}
		public void checkpoint() {
			if (!dependent()&&wv.getHistMap().get(name).isStable()) {{
				wv.getHistMap().get(name).checkpoint();
				HashMap new_histMap = new HashMap();
				new_histMap.put(name, wv.getHistMap().get(name));
				wv = new Worldview();
				wv.setHistMap(new_histMap);
				try {
					FileOutputStream fileOut = new FileOutputStream("./"+name.charAt(name.length()-1)+".ser");
					ObjectOutputStream out = new ObjectOutputStream(fileOut);
					out.writeObject(this);
					out.close();
					fileOut.close();
				}
				catch (IOException e) {
					e.printStackTrace();
				}

			}
}			else {{
				wv.setRootSet(new HashSet());
			}
}		}
		public Transactor self() {
			return ((Transactor)self);
		}
		public void rollback(boolean force) {
			if (!wv.getHistMap().get(name).isStable()||force) {{
				if (wv.getHistMap().get(name).isPersistent()) {{
					Transactor.State saved;
					wv.getHistMap().get(name).rollback();
					HashMap new_histMap = new HashMap();
					new_histMap.put(name, wv.getHistMap().get(name));
					Worldview new_wv = new Worldview();
					new_wv.setHistMap(new_histMap);
					try {
						FileInputStream fileIn = new FileInputStream("./"+name.charAt(name.length()-1)+".ser");
						ObjectInputStream in = new ObjectInputStream(fileIn);
						saved = (Transactor.State)in.readObject();
						saved.mailbox = (Vector)this.mailbox.clone();
						saved.setWV(new_wv);
						in.close();
						fileIn.close();
						ServiceFactory.getNaming().setEntry(saved.getUAN(), saved.getUAL(), saved);
						if (getUAN()!=null) {ServiceFactory.getNaming().update(saved.getUAN(), saved.getUAL());
}						saved.start();
						this.destroy();
					}
					catch (IOException i) {
						i.printStackTrace();
						return;
					}
					catch (ClassNotFoundException c) {
						c.printStackTrace();
						return;
					}

				}
}				else {{
					this.destroy();
				}
}			}
}			else {{
				wv.setRootSet(new HashSet());
			}
}		}
		public String getString() {
			return name+" -> "+wv.getHistMap().get(name).toString()+"\n"+wv.toString();
		}
		public boolean setTState() {
			if (!wv.getHistMap().get(name).isStable()) {{
				if (!wv.getDepGraph().containsKey(name)) {wv.getDepGraph().put(name, new HashSet());
}				Iterator i = wv.getRootSet().iterator();
				while (i.hasNext()) {
					wv.getDepGraph().get(name).add((String)i.next());
				}
				return true;
			}
}			return false;
		}
		public Object getTState() {
			wv.getRootSet().add(name);
			return null;
		}
	}
}