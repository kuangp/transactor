package gctest.local;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.util.*;
import java.io.*;

public class SelfMatrixMul extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		SelfMatrixMul instance = (SelfMatrixMul)new SelfMatrixMul(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new SelfMatrixMul(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return SelfMatrixMul.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new SelfMatrixMul(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return SelfMatrixMul.getReferenceByLocation(new UAL(ual)); }
	public SelfMatrixMul(boolean o, UAN __uan)	{ super(false,__uan); }
	public SelfMatrixMul(boolean o, UAL __ual)	{ super(false,__ual); }
	public SelfMatrixMul(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public SelfMatrixMul(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public SelfMatrixMul(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public SelfMatrixMul()		{  }
	public SelfMatrixMul(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "gctest.local.SelfMatrixMul", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (double[][] a) {
		Object[] __arguments = { a };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct () {
		Object[] __arguments = {  };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public SelfMatrixMul self;
		public void updateSelf(ActorReference actorReference) {
			((SelfMatrixMul)actorReference).setUAL(getUAL());
			((SelfMatrixMul)actorReference).setUAN(getUAN());
			self = new SelfMatrixMul(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "gctest.local.SelfMatrixMul$State" );
			addMethodsForClasses();
		}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		double[][] org;
		public void construct(double[][] a){
			this.org = a;
		}
		public void construct(){
			this.org = null;
		}
		public double[][] mul(double[][] A, double[][] B) {
			try {
				int numRowsA = A.length;
				int numColsA = A[0].length;
				int numColsB = B[0].length;
				double[][] C = new double[numRowsA][numColsB];
				for (int a = 0; a<numRowsA; a++){
					for (int b = 0; b<numColsB; b++){
						double sum = 0;
						for (int col = 0; col<numColsA; col++){
							sum += A[a][col]*B[col][b];
						}
						C[a][b] = sum;
					}
				}
				return C;
			}
			catch (Exception e) {
				return null;
			}

		}
		public double[][] add(double[][] A, double[][] B) {
			try {
				int numRowsA = A.length;
				int numColsA = A[0].length;
				int numColsB = B[0].length;
				double[][] C = new double[numRowsA][numColsA];
				for (int a = 0; a<numRowsA; a++){
					for (int b = 0; b<numColsB; b++){
						C[a][b] = A[a][b]+B[a][b];
					}
				}
				return C;
			}
			catch (Exception e) {
				return null;
			}

		}
		public double[][] exp(double[][] A, Integer eInteger) {
			int MASK = 1;
			int e = eInteger.intValue();
			double[][] res = new double[A.length][A.length];
			double[][] temp = this.add(res, A);
			res = this.add(res, A);
			if (e>0) {{
				while (e>0) {
					if ((e&MASK)>0) {{
						res = this.mul(temp, res);
						System.out.print("--");
						this.show(res);
					}
}					temp = this.mul(temp, temp);
					e = e>>1;
				}
				return res;
			}
}			else {if (e==0) {{
				return this.I(A.length, A.length);
			}
}}			return null;
		}
		public double[][] I(int row, int col) {
			double[][] res = new double[row][col];
			for (int i = 0, j = 0; i<row&&j<col; i++, j++){
				res[i][j] = 1;
			}
			return res;
		}
		public void show(double[][] C) {
			try {
				for (int row = 0; row<C.length; row++){
					for (int col = 0; col<C[0].length; col++){
						System.out.print(C[row][col]+" ");
					}
					System.out.println();
				}
			}
			catch (Exception e) {
				System.out.println("Wrong Data!");
			}

		}
		public void split(Integer e) {
			int e1 = 15&e.intValue();
			int e2 = (240&e.intValue())>>4;
			int e3 = (3840&e.intValue())>>8;
			int e4 = (61440&e.intValue())>>12;
			int e5 = e.intValue()&(~(65535));
			SelfMatrixMul m1 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m2 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m3 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m4 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m5 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m6 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m7 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m8 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			SelfMatrixMul m9 = ((SelfMatrixMul)new SelfMatrixMul(this).construct());
			Token t1 = new Token("t1");
			{
				// token t1 = m1<-exp(org, new Integer(e1))
				{
					Object _arguments[] = { org, new Integer(e1) };
					Message message = new Message( self, m1, "exp", _arguments, null, t1 );
					__messages.add( message );
				}
			}
			Token t2 = new Token("t2");
			{
				// token t2 = m2<-exp(org, new Integer(16))
				{
					Object _arguments[] = { org, new Integer(16) };
					Message message = new Message( self, m2, "exp", _arguments, null, t2 );
					__messages.add( message );
				}
			}
			Token t3 = new Token("t3");
			{
				// token t3 = m3<-exp(org, new Integer(e2))
				{
					Object _arguments[] = { org, new Integer(e2) };
					Message message = new Message( self, m3, "exp", _arguments, null, t3 );
					__messages.add( message );
				}
			}
			Token t4 = new Token("t4");
			{
				// token t4 = m4<-exp(org, new Integer(256))
				{
					Object _arguments[] = { org, new Integer(256) };
					Message message = new Message( self, m4, "exp", _arguments, null, t4 );
					__messages.add( message );
				}
			}
			Token t5 = new Token("t5");
			{
				// token t5 = m5<-exp(org, new Integer(e3))
				{
					Object _arguments[] = { org, new Integer(e3) };
					Message message = new Message( self, m5, "exp", _arguments, null, t5 );
					__messages.add( message );
				}
			}
			Token t6 = new Token("t6");
			{
				// token t6 = m6<-exp(org, new Integer(4096))
				{
					Object _arguments[] = { org, new Integer(4096) };
					Message message = new Message( self, m6, "exp", _arguments, null, t6 );
					__messages.add( message );
				}
			}
			Token t7 = new Token("t7");
			{
				// token t7 = m7<-exp(org, new Integer(e4))
				{
					Object _arguments[] = { org, new Integer(e4) };
					Message message = new Message( self, m7, "exp", _arguments, null, t7 );
					__messages.add( message );
				}
			}
			Token t8 = new Token("t8");
			{
				// token t8 = m8<-exp(org, new Integer(65536))
				{
					Object _arguments[] = { org, new Integer(65536) };
					Message message = new Message( self, m8, "exp", _arguments, null, t8 );
					__messages.add( message );
				}
			}
			Token t9 = new Token("t9");
			{
				// token t9 = m9<-exp(org, new Integer(e5))
				{
					Object _arguments[] = { org, new Integer(e5) };
					Message message = new Message( self, m9, "exp", _arguments, null, t9 );
					__messages.add( message );
				}
			}
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				Token token_2_2 = new Token();
				Token token_2_3 = new Token();
				Token token_2_4 = new Token();
				Token token_2_5 = new Token();
				Token token_2_6 = new Token();
				Token token_2_7 = new Token();
				// ((SelfMatrixMul)self)<-mul(t1, t2)
				{
					Object _arguments[] = { t1, t2 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t3)
				{
					Object _arguments[] = { token_2_0, t3 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t4)
				{
					Object _arguments[] = { token_2_1, t4 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_1, token_2_2 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t5)
				{
					Object _arguments[] = { token_2_2, t5 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_2, token_2_3 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t6)
				{
					Object _arguments[] = { token_2_3, t6 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_3, token_2_4 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t7)
				{
					Object _arguments[] = { token_2_4, t7 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_4, token_2_5 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t8)
				{
					Object _arguments[] = { token_2_5, t8 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_5, token_2_6 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-mul(token, t9)
				{
					Object _arguments[] = { token_2_6, t9 };
					Message message = new Message( self, ((SelfMatrixMul)self), "mul", _arguments, token_2_6, token_2_7 );
					__messages.add( message );
				}
				// show(token)
				{
					Object _arguments[] = { token_2_7 };
					Message message = new Message( self, self, "show", _arguments, token_2_7, null );
					__messages.add( message );
				}
			}
		}
		public void act(String[] args) {
			int arow = 0, times = 0;
			try {
				BufferedReader data1 = new BufferedReader(new InputStreamReader(new FileInputStream(args[0])));
				arow = Integer.parseInt(args[1]);
				times = Integer.parseInt(args[2]);
				org = new double[arow][arow];
				for (int i = 0; i<arow; i++){
					String line = data1.readLine();
					if (line==null||line.length()==0) {{
						i--;
continue;					}
}					StringTokenizer st = new StringTokenizer(line);
					for (int j = 0; j<arow; j++){
						org[i][j] = Double.parseDouble(st.nextToken());
					}
				}
			}
			catch (Exception e) {
				System.err.println(e);
				System.err.println("USAGE: java -cp <lib> gctest.local.SelfMatrixMul <filename> <matrix size> <mul times>");
				return;
			}

			{
				Token token_2_0 = new Token();
				// ((SelfMatrixMul)self)<-exp(org, new Integer(times))
				{
					Object _arguments[] = { org, new Integer(times) };
					Message message = new Message( self, ((SelfMatrixMul)self), "exp", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// ((SelfMatrixMul)self)<-show(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, ((SelfMatrixMul)self), "show", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
	}
}