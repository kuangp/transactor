
module gctest.local;
import java.util.*;
import java.io.*;

behavior MatrixMul {

  double[][] A,B,data;
  int count=0;

  public MatrixMul(double[][] aa, double[][] bb) {A=aa;B=bb;  }

  public double[][] mul() {
    try {
      int numRowsA = A.length; // number of rows in A
      int numColsA = A[0].length; // number of columns in A
      int numColsB = B[0].length; // number of columns in B

      // define result matrix C *****************************
      double[][] C = new double[numRowsA][numColsB];

      // matrix multiplication
      for (int a = 0; a < numRowsA; a++) {
            for (int b = 0; b < numColsB; b++) {
                double sum = 0;
                for (int col = 0; col < numColsA; col++) {
                    sum += A[a][col] * B[col][b];
                }
                C[a][b] = sum;
            }
      }
      return C;
    } catch (Exception e) {return null;}
  }

  public double[][] mul(Integer indexi) {
    try {
      int numRowsA = A.length; // number of rows in A
      int numColsA = A[0].length; // number of columns in A
      int numColsB = B[0].length; // number of columns in B

      // define result matrix C *****************************
      double[][] C = new double[1][numColsB];

      // matrix multiplication
            for (int b = 0; b < numColsB; b++) {
                double sum = 0;
                for (int col = 0; col < numColsA; col++) {
                    sum += A[indexi.intValue()][col] * B[col][b];
                }
                C[0][b] = sum;
            }
      return C;
    } catch (Exception e) {return null;}
  }

  public void setData(double[][] rowdata, Integer row) {
    data[row.intValue()]=rowdata[0];
    count--;
    if (count==0) {System.exit(0);}
  }

  public void show(double[][] C) {
    // show result on screen
    try {
      for (int row = 0; row < C.length; row++) {
        for (int col = 0; col < C[0].length; col++) {
          System.out.print(C[row][col] + " ");
        }
        System.out.println();
      }
    }catch (Exception e) {System.out.println("Wrong Data");}
  }

  public void act(String[] args) {
    double[][] A,B;
    try{
	BufferedReader data1 = new BufferedReader(new InputStreamReader(new FileInputStream(args[0])));
	BufferedReader data2 = new BufferedReader(new InputStreamReader(new FileInputStream(args[1])));
      int arow=Integer.parseInt(args[2]);
      int acol=Integer.parseInt(args[3]);
      int bcol=Integer.parseInt(args[4]);
      int N=4;
      if (args.length>5) {N=Integer.parseInt(args[5]);}
      A=new double[arow][acol];
      B=new double[acol][bcol];


      for(int i=0;i<arow;i++) {
        String line=data1.readLine();
        if (line==null || line.length()==0) {i--;continue;}
        StringTokenizer st=new StringTokenizer(line);
        for (int j=0;j<acol;j++) {
          A[i][j]=Double.parseDouble(st.nextToken());
        }
      }

      for(int i=0;i<acol;i++) {
        String line=data2.readLine();
        if (line==null || line.length()==0) {i--;continue;}
        StringTokenizer st=new StringTokenizer(line);
        for (int j=0;j<bcol;j++) {
          B[i][j]=Double.parseDouble(st.nextToken());
        }
      }

    MatrixMul[] mm=new MatrixMul[N]; 
    for (int i=0;i<N;i++) {
      mm[i]=new MatrixMul(A,B);
    }
    
    count=arow;

    //*************************************
    data=new double[arow][bcol];
    double[][] rowdata=new double[1][acol];
    for (int i=0;i<arow;i++) {
      rowdata[0]=A[i];
      (mm[i%N])<-mul(new Integer(i))@setData(token,new Integer(i));
    }

    //self<-mul()@self<-show(token);


    } catch (Exception e) {
        System.err.println(e);
        System.err.println("USAGE: java -cp <lib> gctest.local.MatrixMul <filename1> <filename2> <A> <B> <C> [# of actors]");
        return;
    }



  }
}
