
module gctest.global;


behavior FourHostFib {
    String nameServer;
    String[] hostArray;
    int myid;
    int n;

	FourHostFib (int _n,int id,String ns,String[] _hostArray) {n=_n;myid=id;nameServer=ns;hostArray=_hostArray;}

	int add(int x, int y) {
		return x + y;
	}

	int fibfun(int nn) {
		if (nn == 0) 		{return 0;}
		else if (nn <= 2) 	{return 1;}
            else {return (this.fibfun(nn-1)+this.fibfun(nn-2));} 

      }

	int compute() {
		if (n == 0) 		{return 0;}
		else if (n <= 2) 	{return 1;}
            else if (n<=30) {return (this.fibfun(n));}
		else {
			FourHostFib fib1 = new FourHostFib(n-1,myid*2,nameServer,hostArray) 
			  at (new UAN("uan://"+nameServer+"/FHF/"+(myid*2)),
                       new UAL("rmsp://"+hostArray[(myid*2)%4]+"/FHF/"+(myid*2)));

			FourHostFib fib2 = new FourHostFib(n-2,myid*2+1,nameServer,hostArray) 
			  at (new UAN("uan://"+nameServer+"/FHF/"+(myid*2+1)),
                       new UAL("rmsp://"+hostArray[(myid*2+1)%4]+"/FHF/"+(myid*2+1)));

			token x = fib1<-compute();
			token y = fib2<-compute();

			add(x, y) @ currentContinuation;
		}
	}

	void end(Object x) {
        System.out.println(x);
        System.exit(0);
      }

	void act(String args[]) {
           hostArray=new String[4];
            try{
		  n = Integer.parseInt(args[0]);
              myid=1;
              nameServer=args[1];
              for (int i=0;i<4;i++) {hostArray[i]=args[2+i];}
              
		  
		  compute() @ self<-end(token);

            } catch (Exception e) {
		  System.err.println(e);
		  System.err.println("Usage: java gctest.global.FourHostFib <number> <Name Server> <host1> <host2> <host3> <host4>");
		  System.err.println("       where <Name Server> should be hostname:port"); 
		  System.err.println("             <host> should be hostname:port"); 
            }
	}
}
