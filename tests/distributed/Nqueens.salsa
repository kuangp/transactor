module tests.distributed;

import java.io.*;
import java.util.*;

behavior Nqueens {
    
  int COUNT=0;

  public Nqueens() {
    COUNT=0;
  }

  public void dummy() {}

  public int getCount() {return COUNT;}

  public void add(Object[] res) {
    for (int i=0;i<res.length;i++) {COUNT+=((Integer)res[i]).intValue();}
  }

  void compute(Integer y, Integer left,Integer down,Integer right, Integer SIZE, Integer MASK) {
    this.Backtrack(y.intValue(),left.intValue(),down.intValue(),right.intValue(), SIZE.intValue(), MASK.intValue());
  }

  void Backtrack(int y, int left, int down, int right, int SIZE, int MASK)
  {
      int  bitmap, bit;

      if (y == SIZE) {
          COUNT++;
      } else {
          bitmap = MASK & ~(left | down | right);
          while (bitmap>0) {
              bit = -bitmap & bitmap;
              bitmap ^= bit;
              this.Backtrack(y+1, (left | bit)<<1, down | bit, (right | bit)>>1, SIZE, MASK);
          }
      }
  }


  transient String theatersFile="theaters.txt";
  transient String nameServer="";

  void act(String args[]) {
    try{
	Nqueens[] actors=new Nqueens[Integer.parseInt(args[1])];
	if (args.length>3) {theatersFile=args[3];}
	nameServer=args[2];

	// read available theaters
	Vector theaters = new Vector();
	String theater;
	try {

	  BufferedReader in = new BufferedReader(new FileReader(theatersFile));
	  while ((theater = in.readLine())!= null){theaters.add(theater);}
	  in.close(); 
	} catch (IOException ioe){
	  standardOutput<-println("[error] Can't open the file "+theatersFile+" for reading.");
	}

	for (int i=0;i<actors.length;i++) {
	  actors[i]=new Nqueens() at
		(new UAN("uan://"+nameServer+"/a"+i), 
                 new UAL("rmsp://"+theaters.get(i%theaters.size())+"/a"+i)
                );
	}

        int SIZE = Integer.parseInt(args[0]);   /*  <- N  */
        int MASK = (1 << SIZE) - 1;
 	startMeasurement();
	if (SIZE<6) {self<-compute(0,0,0,0,new Integer(SIZE),new Integer(MASK))@self<-getCount()@standardOutput<-println(token)@showMeasurement();}
	else {
    		int down=0,left=0,right=0;
		int jdown=0,jleft=0,jright=0;
    		int bitmap = (MASK & ~(left | down | right));
		join{
    		  while (bitmap>0) {
		      int bit = -bitmap & bitmap;
		      bitmap ^= bit;
		      jdown=down | bit;
		      jleft=(left | bit)<<1;
		      jright=(right | bit)>>1;
		      int jbitmap = MASK & ~(jleft | jdown | jright);

		      int indexOfActors=0;
		      while (jbitmap>0) {
		          bit = -jbitmap & jbitmap;
		          jbitmap ^= bit;
		          actors[indexOfActors % actors.length]<-Backtrack(new Integer(2), new Integer((jleft | bit)<<1), new Integer(jdown | bit), new Integer((jright | bit)>>1), new Integer(SIZE), new Integer(MASK));
			  indexOfActors++;
		      } 
		  }
		}  @
		join {
			for (int i=0;i<actors.length;i++) {
			  actors[i]<-getCount();
			}
		} @self<-add(token) @self<-getCount()@standardOutput<-println(token)@showMeasurement();
          }
        } catch (Exception e) {
		 System.err.println("USAGE:java tests.distributed.Nqueens <N> <# of actors> <name server> <theater file>");
		 e.printStackTrace();
		 }

	}
                long startTime=0;
                void startMeasurement() {
                  startTime=System.currentTimeMillis();
                }
                void showMeasurement() {
                  System.out.println("Execution time:"+(System.currentTimeMillis()-startTime));
                }

}
